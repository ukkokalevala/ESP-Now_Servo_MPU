#include <esp_now.h>
#include <WiFi.h>
#include <ESP32Servo.h>

// Define servo object
Servo myServo;

// Data structure to receive from sender
typedef struct struct_message {
    float accX;
    float accY;
    float accZ;
} struct_message;

struct_message incomingData;  // Variable to hold the incoming data

// Callback function to receive data
void OnDataRecv(const esp_now_recv_info *info, const uint8_t *data, int len) {
    if (len == sizeof(incomingData)) {
        // Safely copy the received data into the incomingData structure
        memcpy(&incomingData, data, sizeof(incomingData));  

        // Print the received values
        Serial.print("Received X: ");
        Serial.print(incomingData.accX);
        Serial.print(" | Y: ");
        Serial.print(incomingData.accY);
        Serial.print(" | Z: ");
        Serial.println(incomingData.accZ);

        // Example: Use the data to control the servo position
        int servoAngle = map(incomingData.accX, -17000, 17000, 0, 180);  // Map X acceleration to servo angle
        myServo.write(servoAngle);
    } else {
        Serial.println("Received data length mismatch.");
    }
}

void setup() {
    Serial.begin(115200);

    // Set device as a Wi-Fi station
    WiFi.mode(WIFI_STA);

    // Initialize ESP-NOW
    if (esp_now_init() != ESP_OK) {
        Serial.println("Error initializing ESP-NOW");
        return;
    }

    // Register for a callback function to receive data
    esp_now_register_recv_cb(OnDataRecv);

    // Initialize the servo
    myServo.attach(1);  // Attach the servo to GPIO 9 (or any valid GPIO pin on your board)

    Serial.println("Receiver is ready to receive data.");
}

void loop() {
    // Add a small delay to avoid overwhelming the system with too many messages
    delay(100);  // Adjust the delay based on your communication speed requirements
}
